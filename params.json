{
  "name": "Jsonty",
  "tagline": "",
  "body": "[![Build Status](https://drone.io/github.com/agilej/jsonty/status.png)](https://drone.io/github.com/agilej/jsonty/latest)\r\n\r\nMake fun with JSON serializer.\r\n\r\n## How to use\r\n\r\nFor Maven project:\r\n\r\n```xml\r\n  <dependency>\r\n      <groupId>org.agilej</groupId>\r\n      <artifactId>jsonty</artifactId>\r\n      <version>0.2</version>\r\n  </dependency>\r\n```\r\n\r\nFor Gradle Project\r\n\r\n```groovy\r\n  \r\n  compile group: 'org.agilej', name: 'jsonty', version: '0.2'\r\n\r\n```\r\n\r\nThen write your code ^_^:\r\n\r\n```java\r\n\r\n    final Account account = ...;\r\n    final int status = 20;\r\n    \r\n    JSONModel model = new JSONModel() {\r\n        public void config(FieldExposer exposer) {\r\n            exposer.expose(status).withName(\"status\");\r\n            exposer.expose(account).withNameAndMapping(\"account\", AccountEntity.class);   //use entity mapping expose\r\n        }\r\n    };\r\n\r\n    //or use lambda in java8\r\n    JSONModel model = e -> {\r\n        e.expose(status).withName(\"status\");\r\n        e.expose(account).withNameAndMapping(\"account\", AccountEntity.class);\r\n    }\r\n\r\n    //to json\r\n    String json = new JSONBuilder().build(model);\r\n\r\n    //or write to stream\r\n    new JSONBuilder().build(model, writer);\r\n\r\n```\r\n\r\n## Entity Mapping\r\n\r\nDon't like other json serialization library(for example Gson) use annotation to declare json object's fields,  Jsonty use  entity-mapping strategy. All you need is implement `EntityMapper` interface, define fields will be exposed to json result; then use this mapping with `expose(xx).withMapping()`.\r\n\r\n```java\r\n\r\n    public class AccountEntity implements EntityMapper<Account>{\r\n        \r\n        public void config(Account account, FieldExposer exposer, Environment env) {\r\n            exposer.expose(account.getLogin()).withName(\"loginName\");\r\n            exposer.expose(account.getAvatar()).withName(\"avatar\");\r\n\r\n            //you can use nested EntityMapper too\r\n            exposer.expose(account.getProfile()).withNameAndMapping(\"profile\", ProfileEntity.class);\r\n        }\r\n\r\n    }\r\n```\r\n\r\n#### entity mapping for iterable value\r\n\r\nEntity Mapping also support iterable value such as `Collection` and `Array`, you just call `FieldExposer#expose(xxx)` as normal; jsonty will transfer it to one json array value with every element mapped with given entity mapping type.\r\n\r\nFor example:\r\n\r\n```java\r\n\r\n    // suppose you have iterable values as \r\n\r\n    List<Account> accountList = ...;\r\n    Account[] accountArray = ...;\r\n\r\n    // you can expose as normal\r\n    exposer.expose(accountList).withNameAndMapping(\"accounts\", AccountEntity.class);\r\n    \r\n    exposer.expose(accountArray).withNameAndMapping(\"accounts\", AccountEntity.class);\r\n\r\n```\r\n\r\n## Extra\r\n\r\nYou can set a condition for field expose use `when` or `unless`\r\n\r\n```java\r\n\r\n    exposer.expose(\"xxxx\").withName(\"xxxx\").when(age > 18);\r\n    //or use unless\r\n    exposer.expose(\"xxxx\").withName(\"xxxx\").unless(age <= 18);\r\n```\r\n\r\nYou can alse pass enviroment use `plusEnv`and do some extra calculation while exposing field\r\n\r\n```java\r\n\r\n    Enviroment env = Enviroments.envWith(\"isAdmin\", user.isAdmin()) \r\n    exposer.expose(user.profile).withNameAndMapping(\"profile\", ProfileEntity.class).plusEnv(env);\r\n\r\n    //then in ProfileEntity\r\n\r\n    public class ProfileEntity implements EntityMapper<Profile>{\r\n\r\n        public void config(Profile profile, FieldExposer exposer, Environment env) {\r\n            exposer.expose(xxx).withName(\"xx\");\r\n            if(env.contains(\"isAdmin\") && env.get(\"isAdmin\")){\r\n                exposer.expose(xxx).withName(\"onlyAviableForAdmin\"); \r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n\r\n## TODO\r\n\r\nThese features are considered to be implement in version 0.3.\r\n\r\n* Beauty json print support\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}